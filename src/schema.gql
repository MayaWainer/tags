# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

interface TagConfiguration {
  id: Int!
  name: String!
  type: TagConfigurationType!
  allowMultiple: Boolean!
  applyTo: [TaggableEntities!]!
}

enum TagConfigurationType {
  ValueList
  Number
  String
}

enum TaggableEntities {
  Expense
  Card
}

type PaginatedValueList {
  items: [String!]!
  metadata: PaginationMetaData!
}

type PaginationMetaData {
  """The total count of the items matching the search criteria"""
  totalCount: Int!
}

type ValueListConfiguration implements TagConfiguration {
  id: Int!
  name: String!
  type: TagConfigurationType!
  allowMultiple: Boolean!
  applyTo: [TaggableEntities!]!
  valueList(pagination: PaginationInput = {offset: 0, limit: 20}, sorting: ValueListSort, filter: ValueListFilter): PaginatedValueList!
}

input PaginationInput {
  offset: Int!
  limit: PositiveInt!
}

"""Integers that will have a value greater than 0."""
scalar PositiveInt

input ValueListSort {
  sortDirection: SortDirection! = ASC
}

enum SortDirection {
  ASC
  DESC
}

input ValueListFilter {
  values: [String!]!
}

type StringConfiguration implements TagConfiguration {
  id: Int!
  name: String!
  type: TagConfigurationType!
  allowMultiple: Boolean!
  applyTo: [TaggableEntities!]!
  charCount: Float!
}

type NumberConfiguration implements TagConfiguration {
  id: Int!
  name: String!
  type: TagConfigurationType!
  allowMultiple: Boolean!
  applyTo: [TaggableEntities!]!
  min: Float!
  max: Float!
}

type Tag {
  name: String!
  configuration: TagConfiguration!
  values: [String!]!
}

type Expense implements Taggable {
  tags: [Tag!]!
  id: Int!
  amountInCardCurrency: Float!
  conversionRate: Float!
  merchantName: String!
  createdAt: String!
}

interface Taggable {
  tags: [Tag!]!
}

type Card implements Taggable {
  tags: [Tag!]!
  id: Int!
  nameOnCard: String!
}

type PaginatedExpenses {
  items: [Expense!]!
  metadata: PaginationMetaData!
}

type PaginatedConfig {
  items: [TagConfiguration!]!
  metadata: PaginationMetaData!
}

type PaginatedCards {
  items: [Card!]!
  metadata: PaginationMetaData!
}

type Query {
  getExpense(id: Float!): Expense!
  getAllExpensesPaginated(pagination: PaginationInput = {offset: 0, limit: 20}, sorting: ExpenseSort, filter: ExpensesFilter): PaginatedExpenses!
  getTagConfiguration(id: Float!): TagConfiguration!
  getAllTagConfigurations(pagination: PaginationInput = {offset: 0, limit: 20}, sorting: ConfigSort, filter: ConfigFilter): PaginatedConfig!
  getCard(id: Float!): Card!
  getAllCardsPaginated(pagination: PaginationInput = {offset: 0, limit: 20}, sorting: CardSort, filter: CardsFilter): PaginatedCards!
}

input ExpenseSort {
  sortBy: ExpenseSortKey!
  sortDirection: SortDirection! = ASC
}

enum ExpenseSortKey {
  id
}

input ExpensesFilter {
  ids: [Int!]
}

input ConfigSort {
  sortBy: ConfigSortKey!
  sortDirection: SortDirection! = ASC
}

enum ConfigSortKey {
  id
}

input ConfigFilter {
  ids: [Int!]
}

input CardSort {
  sortBy: CardSortKey!
  sortDirection: SortDirection! = ASC
}

enum CardSortKey {
  id
}

input CardsFilter {
  ids: [Int!]
}

type Mutation {
  tagResource(input: TagResourceInput!): TaggedEntity!
  createTagConfiguration(input: CreateTagConfigurationInput!): TagConfiguration!
  updateTagConfiguration(input: UpdateTagConfigurationInput!): TagConfiguration!
}

union TaggedEntity = Expense | Card

input TagResourceInput {
  configurationId: Int!
  values: [String!]!
  entity: TaggableEntities!
  entityId: Float!
}

input CreateTagConfigurationInput {
  name: String!
  allowMultiple: Boolean!
  taggableEntities: [TaggableEntities!]!
  type: TagConfigurationType!
  valueListTagConfig: ValueListTagConfigInput
  stringTagConfig: StringTagConfigInput
  numberTagConfig: NumberTagConfigInput
}

input ValueListTagConfigInput {
  values: [String!]!
}

input StringTagConfigInput {
  charCount: Float!
}

input NumberTagConfigInput {
  min: Float!
  max: Float!
}

input UpdateTagConfigurationInput {
  id: Float!
  allowMultiple: Boolean
  taggableEntities: [TaggableEntities!]
  valueListTagConfig: UpdateValueListTagInput
  stringTagConfig: StringTagConfigInput
  numberTagConfig: NumberTagConfigInput
}

input UpdateValueListTagInput {
  addValues: [String!]
  removeValues: [String!]
}